{"version":3,"sources":["components/Persons.js","services/personService.js","App.js","serviceWorker.js","index.js"],"names":["Persons","person","filter","name","toLowerCase","includes","number","baseUrl","axios","get","newObject","post","id","put","delete","then","response","persons","data","console","log","Notification","message","className","App","useState","setPersons","newName","setNewName","newNumber","setNewNumber","newFilter","setNewFilter","errorMessage","setErrorMessage","useEffect","personService","length","deleteName","window","confirm","value","onChange","event","target","onSubmit","preventDefault","NameObject","some","el","alert","find","p","catch","error","setTimeout","concat","type","map","i","key","onClick","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bf5a9b6c.chunk.js","sourcesContent":["import React from 'react'\n\nconst Persons = ({ person, filter}) => {\n  if(filter === '' || person.name.toLowerCase().includes(filter.toLowerCase()) === true){\n    return (\n        <li>{person.name} {person.number}</li>\n    )\n  }\n  else{ \n    return ''\n  }\n}\n\nexport default Persons","import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n    return axios.get(baseUrl)\n}\n\nconst create = newObject => {\n    return axios.post(baseUrl, newObject)\n}\n\nconst update = (id, newObject) => {\n    return axios.put(`${baseUrl}/${id}`, {\n        name: newObject.name,\n        number: newObject.number\n    })\n}\n\n\nconst deletePerson = (id) => {\n    return axios.delete(`${baseUrl}/${id}`)\n}\n\nexport default {\n    getAll: getAll,\n    create: create,\n    update: update,\n    deletePerson: deletePerson\n}","import React, { useState, useEffect } from 'react'\nimport Persons from './components/Persons'\nimport axios from 'axios'\nimport personService from './services/personService'\nimport './index.css'\n\naxios\n    .get('http://localhost:3001/api/persons')\n    .then(response => {\n        const persons = response.data\n        console.log(persons)\n    })\n\n\nconst Notification = ({ message }) => {\n    if (message === null) {\n        return null\n    }\n\n    return (\n        <div className=\"error\">\n            {message}\n        </div>\n    )\n}\n\nconst App = () => {\n    const [persons, setPersons] = useState([])\n    const [newName, setNewName] = useState('')\n    const [newNumber, setNewNumber] = useState('')\n    const [newFilter, setNewFilter] = useState('')\n    const [errorMessage, setErrorMessage] = useState(null)\n\n    useEffect(() => {\n        console.log('effect')\n        personService\n            .getAll()\n            .then(response => {\n                console.log('promise fulfilled')\n                setPersons(response.data)\n            })\n    }, [])\n    console.log('render', persons.length, 'notes')\n\n    const addName = (event) => {\n        event.preventDefault()\n        const NameObject = {\n            name: newName,\n            number: newNumber\n        }\n        if (persons.some(el =>\n            el.name === NameObject.name && el.number === NameObject.number)) {\n            window.alert(NameObject.name + \" is already added to Phonebook\")\n        }\n\n        else if (persons.some(el =>\n            el.name === NameObject.name)) {\n            var r = window.confirm(NameObject.name + \" is already added to Phonebook, replace old number with a new one?\")\n            if (r === true) {\n                const person = persons.find(p => p.name === NameObject.name)\n                personService\n                    .update(person.id, NameObject)\n                    .catch(error => {\n                        setErrorMessage(\n                            `Information of '${NameObject.name}' has already been removed from server`\n                        )\n                        setTimeout(() => {\n                            setErrorMessage(null)\n                        }, 5000)\n                    })\n                    .then(response => {\n                        console.log(response)\n                        setNewName('')\n                        setNewNumber('')\n                    })\n            }\n        }\n\n        else {\n            setPersons(persons.concat(NameObject))\n            personService\n                .create(NameObject)\n                .then(response => {\n                    console.log(response)\n                    setNewName('')\n                    setNewNumber('')\n                })\n                .catch(error => {\n                    if(NameObject.name.length < 3){\n                        setErrorMessage(\n                            `Person Validation Failed: Name '${NameObject.name}' is shorter than the minimum allowed length (3)` \n                        )\n                    }\n                    else{\n                        setErrorMessage(\n                            `Person Validation Failed: Number '${NameObject.number}' is shorter than the minimum allowed length (8)` \n                        )\n                    }\n                    console.log(error.response.data)\n                })\n        }\n    }\n\n    const deleteName = ({ person }) => {\n        console.log(person)\n        var r = window.confirm(\"Delete \" + person.name + \"?\")\n        if (r === true) {\n            personService\n                .deletePerson(person.id)\n                .then(response => {\n                    console.log(response)\n                })\n        }\n        \n    }\n\n\n    const handleNameChange = (event) => {\n        console.log(event.target.value)\n        setNewName(event.target.value)\n    }\n\n    const handleNumberChange = (event) => {\n        console.log(event.target.value)\n        setNewNumber(event.target.value)\n    }\n\n    const handleFilterChange = (event) => {\n        console.log(event.target.value)\n        setNewFilter(event.target.value)\n    }\n\n    return (\n        <div>\n            <h2>Phonebook</h2>\n            <Notification message={errorMessage} />\n            <form>\n                <div> filter shown with <input value={newFilter} onChange={handleFilterChange} /></div>\n            </form>\n            <h2> add a new</h2>\n            <form onSubmit={addName}>\n                <div>name: <input value={newName} onChange={handleNameChange}/></div>\n                <div>number: <input value={newNumber} onChange={handleNumberChange}/></div>\n                <div>\n                    <button type=\"submit\">add</button>\n                </div>\n            </form>\n            <h2>Numbers</h2>\n            <form onSubmit={deleteName}>\n                <ul>\n                    <div>\n                        {persons.map((person, i) => (\n                            <div key={i}>\n                                <Persons key={person.number} person={person} filter={newFilter} />\n                                <button onClick={() => deleteName({ person})}>delete</button>\n                            </div>\n                        ))}\n                    </div>\n                </ul>\n            </form>\n    </div>\n    )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}